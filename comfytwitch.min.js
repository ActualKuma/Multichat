async function e() {
    return await async function() {
        try {
            const e = localStorage.getItem("twitchToken")
              , n = localStorage.getItem("refreshToken");
            if (e) {
                let r = await t(e);
                if (r && r.login)
                    return r.token = e,
                    r.refreshToken = n,
                    r;
                if (n) {
                    if (!o.refreshUrl)
                        throw new Error("No refresh endpoint set");
                    const e = await fetch(`${o.refreshUrl}?token=${n}`).then(e=>e.json())
                      , r = e.access_token
                      , c = await t(r);
                    if (c && c.login)
                        return localStorage.setItem("twitchToken", r),
                        localStorage.setItem("refreshToken", e.refresh_token),
                        c.token = r,
                        c.refreshToken = e.refresh_token,
                        c
                }
            }
        } catch (e) {
            console.error(e)
        }
        return null
    }() || await async function() {
        try {
            !function() {
                const e = new URLSearchParams(location.search).get("state")
                  , t = window.localStorage.getItem("comfytwitch_nonce");
                if (e && e !== t)
                    throw new Error("Auth State did not match")
            }();
            const e = new URLSearchParams(location.search).get("code")
              , n = new URLSearchParams(location.hash.replace("#", "")).get("access_token");
            if (e) {
                if (!o.codeAuthUrl)
                    throw new Error("No code grant endpoint set");
                const n = await fetch(`${o.codeAuthUrl}?code=${e}&redirect=${window.location.origin + window.location.pathname}`).then(e=>e.json())
                  , r = n.access_token
                  , c = await t(r);
                if (c && c.login) {
                    localStorage.setItem("twitchToken", r),
                    localStorage.setItem("refreshToken", n.refresh_token);
                    const e = window.location.href.split("?")[0];
                    return window.location.replace(e),
                    c.token = r,
                    c.refreshToken = n.refresh_token,
                    c
                }
            } else if (n) {
                const e = await t(n);
                if (e && e.login) {
                    localStorage.setItem("twitchToken", n);
                    const t = window.location.href.split("#")[0];
                    return window.location.replace(t),
                    e.token = n,
                    e
                }
            }
        } catch (e) {
            console.error(e)
        }
        return null
    }()
}
async function t(e) {
    return await fetch("https://id.twitch.tv/oauth2/validate", {
        headers: {
            Authorization: "OAuth " + e
        }
    }).then(e=>e.json()).catch(e=>({
        error: e
    }))
}
let o = {
    UserId: 0,
    User: "",
    ClientID: "",
    Token: "",
    RefreshToken: "",
    Scopes: [],
    Logout: function() {
        localStorage.removeItem("twitchToken"),
        localStorage.removeItem("refreshToken")
    },
    Login: function(e, t, o=["channel:read:redemptions", "user:read:email", "user:write:chat", "channel:moderate"], n="token") {
        const r = function() {
            const e = "0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-_"
              , t = [];
            return window.crypto.getRandomValues(new Uint8Array(32)).forEach(o=>t.push(e[o % e.length])),
            t.join("")
        }();
        window.localStorage.setItem("comfytwitch_nonce", r),
        window.location.href = `https://id.twitch.tv/oauth2/authorize?client_id=${e}&redirect_uri=${t}&response_type=${n}&scope=${encodeURIComponent(o.join(" "))}&state=${r}`
    },
    SetAuthEndpoint: function(e) {
        o.codeAuthUrl = e
    },
    SetRefreshEndpoint: function(e) {
        o.refreshUrl = e
    },
    Check: async function(t) {
        let n = await e();
        return n ? (o.ClientID = n.client_id,
        o.UserId = n.user_id,
        o.User = n.login,
        o.Token = n.token,
        o.RefreshToken = n.refreshToken,
        o.Scopes = n.scopes) : (o.Logout(),
        t && (window.location.href = t)),
        n
    },
    GetUser: async function(e, t) {
        return await fetch("https://api.twitch.tv/helix/users?login=" + t, {
            headers: {
                "Client-ID": e,
                Authorization: "Bearer " + o.Token
            }
        }).then(e=>e.json()).then(e=>e.data.length > 0 ? e.data[0] : {}).catch(e=>({
            error: e
        }))
    },
    GetBadges: async function(e, t) {
        return await fetch("https://api.twitch.tv/helix/chat/badges?broadcaster_id=" + t, {
            headers: {
                "Client-ID": e,
                Authorization: "Bearer " + o.Token
            }
        }).then(e=>e.json()).catch(e=>({
            error: e
        }))
    },
    GetBadgesGlobal: async function(e) {
        return await fetch("https://api.twitch.tv/helix/chat/badges/global", {
            headers: {
                "Client-ID": e,
                Authorization: "Bearer " + o.Token
            }
        }).then(e=>e.json()).catch(e=>({
            error: e
        }))
    },
    GetCurrentUser: async function(e) {
        return await fetch("https://api.twitch.tv/helix/users", {
            headers: {
                "Client-ID": e,
                Authorization: "Bearer " + o.Token
            }
        }).then(e=>e.json()).then(e=>e.data.length > 0 ? e.data[0] : {}).catch(e=>({
            error: e
        }))
    },
    GetToken: function() {
        return o.Token;
    },
    SendMessage: async function(e, b, s, t) {
        return await fetch("https://api.twitch.tv/helix/chat/messages", {
            method: "POST",
            headers: {
                "Client-ID": e,
                Authorization: "Bearer " + o.Token,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                'broadcaster_id': `${b}`,
                'sender_id': `${s}`,
                'message': `${t}`
            })
        }).then(e=>e.json()).catch(e=>({
            error: e
        }))
    },
    BanUser: async function(e, b, m, u) {
        return await fetch(`https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${b}&moderator_id=${m}`, {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer ' + o.Token,
                'Client-Id': e,
                'Content-Type': 'application/json'
            },
            // body: '{"data": {"user_id":"9876","reason":"no reason"}}',
            body: JSON.stringify({
                'data': {
                    'user_id': u,
                    'reason': 'no reason'
                }
            })
        });
    },
    TimeoutUser: async function(e, b, m, u, t) {
        return await fetch(`https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${b}&moderator_id=${m}`, {
            method: 'POST',
            headers: {
                'Authorization': 'Bearer ' + o.Token,
                'Client-Id': e,
                'Content-Type': 'application/json'
            },
            // body: '{"data": {"user_id":"9876","reason":"no reason"}}',
            body: JSON.stringify({
                'data': {
                    'user_id': u,
                    'duration': t,
                    'reason': 'no reason'
                }
            })
        });
    },
    UnbanUser: async function(e, b, m, u) {
        return await fetch(`https://api.twitch.tv/helix/moderation/bans?broadcaster_id=${b}&moderator_id=${m}&user_id=${u}`, {
            method: 'DELETE',
            headers: {
                'Authorization': 'Bearer ' + o.Token,
                'Client-Id': e
            }
        });
    },
    GetBannedUsers: async function(e, b) {
        return await fetch(`https://api.twitch.tv/helix/moderation/banned?broadcaster_id=${b}`, {
            headers: {
                'Authorization': 'Bearer ' + o.Token,
                'Client-Id': e
            }
        });
    },
    DeleteMessage: async function(e, b, m, i) {
        return await fetch(`https://api.twitch.tv/helix/moderation/chat?broadcaster_id=${b}&moderator_id=${m}&message_id=${i}`, {
            method: 'DELETE',
            headers: {
                'Authorization': 'Bearer ' + o.Token,
                'Client-Id': e
            }
        });
    }
};
window.ComfyTwitch = o;
